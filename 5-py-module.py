#################################### 七、模块 #############################################

## 1、模块

# 为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，
# 这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。
# 在Python中，一个.py文件就称之为一个模块（Module）

# 使用模块有什么好处？
# 最大的好处是大大提高了代码的可维护性。
# 其次，编写代码不必从零开始。当一个模块编写完毕，就可以被其他地方引用。
# 我们在编写程序的时候，也经常引用其他模块，包括Python内置的模块和来自第三方的模块。

# 使用模块还可以避免函数名和变量名冲突。相同名字的函数和变量完全可以分别存在不同的模块中，
# 因此，我们自己在编写模块时，不必考虑名字会与其他模块冲突。但是也要注意，尽量不要与内置函数名字冲突
# python 所有内置函数 https://docs.python.org/3/library/functions.html

# 如果不同的人编写的模块名相同怎么办？
# 为了避免模块名冲突，Python又引入了按目录来组织模块的方法，称为包（Package）
# 引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突

# 注意，每一个包目录下面都会有一个__init__.py的文件，这个文件是必须存在的，
# 否则，Python就把这个目录当成普通目录，而不是一个包。
# __init__.py可以是空文件，也可以有Python代码，因为__init__.py本身就是一个模块，而它的模块名就是mycompany。

# 自己创建模块时要注意命名，不能和Python自带的模块名称冲突。
# 例如，系统自带了sys模块，自己的模块就不可命名为sys.py，否则将无法导入系统自带的sys模块

# 1.1 安装第三方模块
# 在Python中，安装第三方模块，是通过包管理工具pip完成的。


## 2、作用域
# 在一个模块中，我们可能会定义很多函数和变量，
# 但有的函数和变量我们希望给别人使用，有的函数和变量我们希望仅仅在模块内部使用。在Python中，是通过_前缀来实现的

# 正常的函数和变量名是公开的（public），可以被直接引用，比如：abc，x123，PI等
# 类似__xxx__这样的变量是特殊变量，可以被直接引用，但是有特殊用途，比如 __name__ 就是特殊变量

# 类似_xxx和__xxx这样的函数或变量就是非公开的（private），不应该被直接引用，比如_abc，__abc等

# private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，
# 是因为Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量。

# private函数或变量不应该被别人引用，那它们有什么用呢？
def _private_1(name):
    return 'Hello, %s' % name

def _private_2(name):
    return 'Hi, %s' % name

def greeting(name):
    if len(name) > 3:
        return _private_1(name)
    else:
        return _private_2(name)

# 我们在模块里公开greeting()函数，而把内部逻辑用private函数隐藏起来了，
# 这样，调用greeting()函数不用关心内部的private函数细节，这也是一种非常有用的代码封装和抽象的方法，
# 即：外部不需要引用的函数全部定义成private，只有外部需要引用的函数才定义为public